/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaceGUI;

import SourceCode.Appointment;
import SourceCode.Personnel;
import SourceCode.UtilityTools;
import SourceCode.Vaccine;
import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author devil
 */
public class AppointmentGUI extends javax.swing.JFrame {

    private Personnel loggedPS;
    private List<Appointment> appointments = new ArrayList<>();
    private ArrayList<Vaccine> vaccine = new ArrayList<Vaccine>();
    private DefaultTableModel AppointmentTable;
    private String updatestatustime;

    /**
     * Creates new form AppointmentGUI
     */
    public AppointmentGUI() {
        initComponents();
    }

    public AppointmentGUI(Personnel p) {
        this.loggedPS = p;
        UtilityTools u = new UtilityTools();
        appointments = u.LoadAppointment();
        vaccine = u.LoadVaccine();
        initComponents();

        AppointmentTable = (DefaultTableModel) tblAppointment.getModel();
        for (int i = 0; i < appointments.size(); i++) {
            if (appointments.get(i).getFacilityName().equals(loggedPS.getFacility())) {
                AppointmentTable.addRow(new Object[]{
                    appointments.get(i).getApptID(),
                    appointments.get(i).getTime(),
                    appointments.get(i).getDate(),
                    appointments.get(i).getLocation(),
                    appointments.get(i).getFacilityName(),
                    appointments.get(i).getStatus(),
                    appointments.get(i).getRegisteredUser(),
                    appointments.get(i).getUsedVacc()});
            }          
        }

        for (int i = 0; i < 24; i++) { //Load Time 0 - 23
            String time = Integer.toString(i);
            comboTime.addItem(time);
            comboTime1.addItem(time);
        }

        for (int i = 0; i < vaccine.size(); i++) { //Load vaccines
            comboVaccine.addItem(vaccine.get(i).getVaccName());
        }

        for(int i = 0; i < appointments.size(); i++) {
            if(appointments.get(i).getStatus().equals("Pending"))this.btnPendingAppointment.setBackground(Color.red);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLocaleChooser1 = new com.toedter.components.JLocaleChooser();
        jDialog1 = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        comboTime1 = new javax.swing.JComboBox<>();
        btnOKtime = new javax.swing.JButton();
        lblAppointmentTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        checkboxEditMode = new javax.swing.JCheckBox();
        btnPendingAppointment = new javax.swing.JButton();
        btnUpdateStatus = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblAppointmentID = new javax.swing.JLabel();
        lbltheAppointmentID = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        comboTime = new javax.swing.JComboBox<>();
        lblDate = new javax.swing.JLabel();
        jdateDate = new com.toedter.calendar.JDateChooser();
        btnCreateAppointment = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        lblVaccine = new javax.swing.JLabel();
        comboVaccine = new javax.swing.JComboBox<>();
        btnFinishEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblUserID = new javax.swing.JLabel();
        lbltheUserID = new javax.swing.JLabel();
        lbltheStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jDialog1.setResizable(false);
        jDialog1.setSize(new java.awt.Dimension(320, 170));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Pick a time for next appointment");

        comboTime1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No time is selected." }));

        btnOKtime.setText("OK");
        btnOKtime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKtimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboTime1, 0, 299, Short.MAX_VALUE)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(btnOKtime))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboTime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnOKtime)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setAutoRequestFocus(false);
        setResizable(false);

        lblAppointmentTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAppointmentTitle.setText("Appointment Panel");

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ApptID", "Time", "Date", "Location", "FacilityName", "Status", "UserID", "Vaccine"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppointment);

        txtSearch.setText("Search");
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        checkboxEditMode.setText("Edit Mode");
        checkboxEditMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxEditModeActionPerformed(evt);
            }
        });

        btnPendingAppointment.setText("Pending Appointment");
        btnPendingAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPendingAppointmentActionPerformed(evt);
            }
        });

        btnUpdateStatus.setText("Update Status");
        btnUpdateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStatusActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAppointmentID.setText("Appointment ID: ");

        lbltheAppointmentID.setText("apptID");

        lblTime.setText("Time");

        comboTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No time is selected." }));
        comboTime.setEnabled(false);

        lblDate.setText("Date");

        jdateDate.setEnabled(false);

        btnCreateAppointment.setText("Create Appointment");
        btnCreateAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAppointmentActionPerformed(evt);
            }
        });

        lblStatus.setText("Status:");

        lblVaccine.setText("Vaccine");

        comboVaccine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No Vaccine selected." }));
        comboVaccine.setEnabled(false);

        btnFinishEdit.setText("Finish Edit");
        btnFinishEdit.setEnabled(false);
        btnFinishEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblUserID.setText("User ID: ");

        lbltheUserID.setText("userID");

        lbltheStatus.setText("Status");

        jLabel1.setText("Button above will update the selected appointment status.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPendingAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCreateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblTime)
                                    .addComponent(lblVaccine)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblAppointmentID)
                                            .addComponent(lblUserID)
                                            .addComponent(lblStatus))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbltheStatus)
                                            .addComponent(lbltheUserID)
                                            .addComponent(lbltheAppointmentID)))
                                    .addComponent(comboVaccine, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(172, 172, 172)
                                        .addComponent(btnDelete))
                                    .addComponent(lblDate)
                                    .addComponent(comboTime, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jdateDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(btnFinishEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkboxEditMode))
                            .addComponent(lblAppointmentTitle))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(237, 237, 237))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblAppointmentTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkboxEditMode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAppointmentID)
                            .addComponent(lbltheAppointmentID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserID)
                            .addComponent(lbltheUserID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStatus)
                            .addComponent(lbltheStatus))
                        .addGap(18, 18, 18)
                        .addComponent(lblTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDate)
                        .addGap(5, 5, 5)
                        .addComponent(jdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(lblVaccine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFinishEdit)
                            .addComponent(btnDelete)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPendingAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addGap(14, 14, 14))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        TableRowSorter<DefaultTableModel> sort = new TableRowSorter<DefaultTableModel>(AppointmentTable);
        tblAppointment.setRowSorter(sort);
        sort.setRowFilter(RowFilter.regexFilter(txtSearch.getText().trim()));          // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void checkboxEditModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxEditModeActionPerformed
        if (checkboxEditMode.isSelected() == true) {
            comboTime.setEnabled(true);
            jdateDate.setEnabled(true);
            btnFinishEdit.setEnabled(true);
            btnDelete.setEnabled(true);
        } else if (checkboxEditMode.isSelected() == false) {
            comboTime.setEnabled(false);
            comboVaccine.setEnabled(false);
            jdateDate.setEnabled(false);
            btnFinishEdit.setEnabled(false);
            btnDelete.setEnabled(false);
        }
    }//GEN-LAST:event_checkboxEditModeActionPerformed

    private void btnCreateAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAppointmentActionPerformed
        String msg = "Do note that by normal occasion, you should NOT register an appointment for others.";
        int input = JOptionPane.showConfirmDialog(null, msg, "Alert", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE);

        if (input == 0) {
            new CreateAppointmentGUI(loggedPS).setVisible(true);
            this.dispose();
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnCreateAppointmentActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
        new PersonnelHomeScreen(loggedPS.getUserID(),
                loggedPS.getUsername(), 
                loggedPS.getPassword(), 
                loggedPS.getEmail(), 
                loggedPS.getFullname(), 
                loggedPS.getAccType()).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
        try {
            int row = tblAppointment.getSelectedRow();
            this.lbltheAppointmentID.setText(AppointmentTable.getValueAt(row, 0).toString());
            this.lbltheUserID.setText(AppointmentTable.getValueAt(row, 6).toString());
            this.lbltheStatus.setText(AppointmentTable.getValueAt(row, 5).toString());

            int size = comboVaccine.getItemCount();

            for (int i = 0; i < size; i++) {//set vaccine
                if (this.comboVaccine.getItemAt(i).equals(AppointmentTable.getValueAt(row, 7).toString())) {
                    this.comboVaccine.setSelectedIndex(i);

                }
            }

            for (int i = 0; i < 24; i++) {//set time
                if (this.comboTime.getItemAt(i).equals(AppointmentTable.getValueAt(row, 1).toString())) {
                    this.comboTime.setSelectedIndex(i);
                }
            }

            Date apptDate = new SimpleDateFormat("yyyy-MM-dd").parse(AppointmentTable.getValueAt(row, 2).toString());
            this.jdateDate.setDate(apptDate);

            if (this.lbltheStatus.getText().equals("Pending") || this.lbltheStatus.getText().equals("First Dose")) {
                if (checkboxEditMode.isSelected()) {
                    this.comboVaccine.setEnabled(true);
                }
            } else {
                comboVaccine.setEnabled(false);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_tblAppointmentMouseClicked

    private void btnFinishEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishEditActionPerformed
        String newtime = this.comboTime.getSelectedItem().toString();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String newdate = df.format(this.jdateDate.getDate());
        String newvacc = this.comboVaccine.getSelectedItem().toString();
        ArrayList<String> appointmentrecords = new ArrayList<>();
        UtilityTools u = new UtilityTools();
        String pending = "Pending";
        String firstdose = "First Dose";

        if (this.lbltheStatus.getText().equals(pending) || this.lbltheStatus.getText().equals(firstdose)) {
            if (comboTime.getSelectedIndex() == 0
                    || comboVaccine.getSelectedIndex() == 0
                    || jdateDate.getDate() == null) {
                JOptionPane.showMessageDialog(null, "There is information not selected!");
                //some informatin is not selected
            } else if (u.isValidDate(jdateDate.getDate(), newtime) == false) {
                JOptionPane.showMessageDialog(null, "Please select a valid date");
                //if all information is selected, check is the schedule selected is past
            } else {
                int input = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this appointment?", "", JOptionPane.OK_CANCEL_OPTION);
                if (input == 0) {

                    for (int i = 0; i < appointments.size(); i++) {
                        if (appointments.get(i).getApptID().equals(this.lbltheAppointmentID.getText())) {
                            appointments.get(i).setTime(newtime);
                            appointments.get(i).setDate(newdate);
                            //change the vaccine stocks
                            u.UpdateVaccineQuantity("+", appointments.get(i).getUsedVacc());//increase docse stocks

                            appointments.get(i).setUsedVacc(newvacc);
                            u.UpdateVaccineQuantity("-", appointments.get(i).getUsedVacc()); //reduce dose stocks

                            appointmentrecords.add(appointments.get(i).toString());
                        } else {
                            appointmentrecords.add(appointments.get(i).toString());
                        }
                    }

                    if (appointmentrecords.isEmpty() == false) { //if the string arraylist is not empty
                        Appointment apt = new Appointment();
                        apt.UpdateAppointment(appointmentrecords);
                        
                        this.dispose();
                        new AppointmentGUI(loggedPS).setVisible(true);
                    }

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Only appointments pending for confirmation or first dose is editable!"); //cannot edit appointments alrdy had first dose
        }
    }//GEN-LAST:event_btnFinishEditActionPerformed

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        if (txtSearch.getText().equals("Search")) {
            txtSearch.setText("");
        }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        if (txtSearch.getText().isEmpty()) {
            txtSearch.setText("Search");
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        ArrayList<String> appointmentrecords = new ArrayList<>();

        if (this.lbltheStatus.getText().equals("Pending") || this.lbltheStatus.getText().equals("First Dose")) {
            
            int input = JOptionPane.showConfirmDialog(null, "Are you sure you want to DELETE this appointment?", "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if (input == 0) {
                for (int i = 0; i < appointments.size(); i++) {
                    if (appointments.get(i).getApptID().equals(this.lbltheAppointmentID.getText()) == false) {
                        appointmentrecords.add(appointments.get(i).toString());
                    }
                }
            }

            if (appointmentrecords.isEmpty() == false) { //if the string arraylist is not empty
                Appointment apt = new Appointment();
                apt.UpdateAppointment(appointmentrecords);
                
                this.dispose();
                new AppointmentGUI(loggedPS).setVisible(true);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Only appointments pending for confirmation or first dose is editable!"); //cannot edit appointments alrdy had first dose
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnPendingAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPendingAppointmentActionPerformed
      this.dispose();
      new PendingAppointmentGUI(appointments,loggedPS).setVisible(true);
    }//GEN-LAST:event_btnPendingAppointmentActionPerformed

    private void btnUpdateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStatusActionPerformed
       if(tblAppointment.getSelectionModel().isSelectionEmpty()){
           //Is there any selected appointment?
       }else{
           int row = tblAppointment.getSelectedRow();
           if(AppointmentTable.getValueAt(row, 5).toString().equals("Pending") ||AppointmentTable.getValueAt(row, 5).toString().equals("Done") ){
              JOptionPane.showMessageDialog(null, "This appointment has nothing to update. "); 
           //Is the appointment in pending or fully vaccinated stat?
       }else{
        jDialog1.setLocationRelativeTo(null);
        jDialog1.setAlwaysOnTop(this.isAlwaysOnTopSupported());
        jDialog1.setVisible(true);
               }
       }
    }//GEN-LAST:event_btnUpdateStatusActionPerformed

    private void btnOKtimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKtimeActionPerformed
        int row = tblAppointment.getSelectedRow();
        String apptid = AppointmentTable.getValueAt(row, 0).toString();
        String status = AppointmentTable.getValueAt(row, 5).toString();
        String nextStage = "";
        
        
        updatestatustime = this.comboTime1.getSelectedItem().toString();
        jDialog1.dispose();  
        if(status.equals("First Dose"))nextStage="Second Dose";
        if(status.equals("Second Dose"))nextStage="Done";
        String msg = "Appointment ID: "+apptid+"\nFrom: "+status+" >>>to>>> "+nextStage;
        
        int input = JOptionPane.showConfirmDialog(null,msg, "Confirm Update status", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);  
        if (input == 0) {
        new Appointment().UpdateAppointmentStatus(apptid, nextStage, updatestatustime);
        this.dispose();
        new AppointmentGUI(loggedPS).setVisible(true);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnOKtimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateAppointment;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFinishEdit;
    private javax.swing.JButton btnOKtime;
    private javax.swing.JButton btnPendingAppointment;
    private javax.swing.JButton btnUpdateStatus;
    private javax.swing.JCheckBox checkboxEditMode;
    private javax.swing.JComboBox<String> comboTime;
    private javax.swing.JComboBox<String> comboTime1;
    private javax.swing.JComboBox<String> comboVaccine;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.toedter.components.JLocaleChooser jLocaleChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdateDate;
    private javax.swing.JLabel lblAppointmentID;
    private javax.swing.JLabel lblAppointmentTitle;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JLabel lblVaccine;
    private javax.swing.JLabel lbltheAppointmentID;
    private javax.swing.JLabel lbltheStatus;
    private javax.swing.JLabel lbltheUserID;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
